8/30/19 Meeting Notes: 

Project overview: using clickstream data to find out success in the classroom from their grade and assignment data (i.e. time left to complete assignment, etc.)

Overfitting: when there is too much data and the algorithm finds irrelevant data or trends (since there is so much data, there is potential for multiple copies of one data form or coincidences) 

To combat overfitting, possible solutions include using the smallest number of feature sets in order to find the most applicable trend line for the data 

Adaboost: when small trees are averaged together in order to find various edge cases

SQL database: includes a large spreadsheet with columns of grades (which must be collected and organized through cleaning and categorizing the data once it is obtained) 

mongoDB: noSQL server *filled with different types of documents*
Relational database: essentially a datasheet for the data collected 
nonRelational database: random groupings of data*

Cleaning the data: upon collecting the data, being able to put the data into a spreadsheet format and can be used for Machine Learning

Binary Prediction: determining dropout rates and determining survival rates 

Options for project: 

- revision: examining data from previous semesters (i.e. prolonged training times)could look into newer modeling techniques (i.e. Hidden Markov Modeling)examining code for accuracy and efficiency 

- potential intervention method:build an application to notify professors of students who are at risk for dropping out or failing the class  

Past Plans: 
- clean data 
- create library of models 
- evaluate model success

Possible Plans: 
- revise previous models 
- add more data 
- revise code to determine proven functionality 

Refreshing on: JavaScript, Python, Django, and Python Flask 

SQL and mongoDB: 
- join, query, select, aggregate, and filter data 
- PostgreSQL 
